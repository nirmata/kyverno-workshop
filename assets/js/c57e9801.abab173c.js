"use strict";(self.webpackChunkkyverno_workshop=self.webpackChunkkyverno_workshop||[]).push([[814],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=a,m=p["".concat(s,".").concat(d)]||p[d]||g[d]||i;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3124:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={},o="Supply chain security",l={unversionedId:"module4/README",id:"module4/README",title:"Supply chain security",description:"Image signing and verification",source:"@site/docs/module4/README.md",sourceDirName:"module4",slug:"/module4/",permalink:"/kyverno-workshop/docs/module4/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Module 3: Kubernetes Best Practices using Kyverno",permalink:"/kyverno-workshop/docs/module3/"},next:{title:"Module 5: Multitenancy",permalink:"/kyverno-workshop/docs/module5/"}},s={},u=[{value:"Image signing and verification",id:"image-signing-and-verification",level:2},{value:"Generate key-pair",id:"generate-key-pair",level:3},{value:"Sign container image",id:"sign-container-image",level:3},{value:"Exercise",id:"exercise",level:3},{value:"Task",id:"task",level:2}],c={toc:u},p="wrapper";function g(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"supply-chain-security"},"Supply chain security"),(0,a.kt)("h2",{id:"image-signing-and-verification"},"Image signing and verification"),(0,a.kt)("h3",{id:"generate-key-pair"},"Generate key-pair"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cosign generate-key-pair\n")),(0,a.kt)("h3",{id:"sign-container-image"},"Sign container image"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cosign sign --key cosign.key user/demo\n")),(0,a.kt)("h3",{id:"exercise"},"Exercise"),(0,a.kt)("p",null,"Let us now look at the Kyverno policy used to verify image signatures."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'apiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: check-image\nspec:\n  validationFailureAction: Audit\n  background: false\n  webhookTimeoutSeconds: 30\n  failurePolicy: Fail\n  rules:\n    - name: check-image\n      match:\n        any:\n          - resources:\n              kinds:\n                - Pod\n                - Deployment\n      verifyImages:\n        - imageReferences:\n            - "docker.io/anushah/*"\n          attestors:\n            - count: 1\n              entries:\n                - keys:\n                    publicKeys: |-\n                      -----BEGIN PUBLIC KEY-----\n                      Your Public Key Here\n                      -----END PUBLIC KEY-----\n\n')),(0,a.kt)("p",null,"We will now try to run an unsigned image before applying the above policy."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl run unsigned --image=anushah/unsigned:v1.0.0 --dry-run=server\n")),(0,a.kt)("p",null,"So there was no problem running. This tells us that it is possible now for ",(0,a.kt)("strong",{parentName:"p"},"any")," image to run in our cluster. Let us apply the Kyverno policy"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl apply -f check-image.yaml\n")),(0,a.kt)("p",null,"Check if the policy is applied and ready."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl get polr -A\n")),(0,a.kt)("p",null,"Let us try to run the same unsigned image now and see what happens this time."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl run unsigned --image=anushah/unsigned:v1.0.0 --dry-run=server\n")),(0,a.kt)("p",null,"Finally let us run an image that is actually signed with the corresponding private key."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl run signed --image=anushah/signed:v1.0.0 --dry-run=server\n")),(0,a.kt)("p",null,"Voila! It runs!"),(0,a.kt)("h2",{id:"task"},"Task"),(0,a.kt)("p",null,"But, do ",(0,a.kt)("strong",{parentName:"p"},"all")," signed images run irrespective of what private key they use?"),(0,a.kt)("p",null,"Can you generate a different set of key pairs and sign an image with the newly created private key. Now try to run this image with the already existing policy. Does it work? Why?"))}g.isMDXComponent=!0}}]);