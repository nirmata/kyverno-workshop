"use strict";(self.webpackChunkkyverno_workshop=self.webpackChunkkyverno_workshop||[]).push([[225],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),i=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=i(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=i(t),m=a,y=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(y,l(l({ref:n},p),{},{components:t})):r.createElement(y,l({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var i=2;i<o;i++)l[i]=t[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8495:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var r=t(7462),a=(t(7294),t(3905));const o={},l="Module 7: Cleanup Policies",s={unversionedId:"module7/README",id:"module7/README",title:"Module 7: Cleanup Policies",description:"Periodically, we might want to cleanup our cluster and keep only those resources which are necessary. Kyverno supports Cleanup Policies which do exactly this.",source:"@site/docs/module7/README.md",sourceDirName:"module7",slug:"/module7/",permalink:"/kyverno-workshop/docs/module7/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Module 6: Policy Exceptions",permalink:"/kyverno-workshop/docs/module6/"}},c={},i=[{value:"Task 1",id:"task-1",level:2},{value:"Task 2",id:"task-2",level:2}],p={toc:i},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"module-7-cleanup-policies"},"Module 7: Cleanup Policies"),(0,a.kt)("p",null,"Periodically, we might want to cleanup our cluster and keep only those resources which are necessary. Kyverno supports Cleanup Policies which do exactly this."),(0,a.kt)("h2",{id:"task-1"},"Task 1"),(0,a.kt)("p",null,"The following Policy when deployed would automatically clear ",(0,a.kt)("inlineCode",{parentName:"p"},"Pods")," which are no longer needed every ",(0,a.kt)("inlineCode",{parentName:"p"},"1 minute"),". But first, we must assign the proper permissions to Kyverno's Cleanup Controller."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'k edit clusterrole kyverno:cleanup-controller:core\n...\n- apiGroups:\n  - ""\n  resources:\n  - pods\n  verbs:\n  - list\n  - get\n  - delete\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: kyverno.io/v2alpha1\nkind: ClusterCleanupPolicy\nmetadata:\n  name: cleanup-pods\nspec:\n  match:\n    any:\n    - resources:\n        kinds:\n          - Pod\n        selector:\n          matchLabels:\n            canRemove: "true"\n  schedule: "*/1 * * * *"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"k run nginx --image=nginx:1.23 --labels canRemove=true\n")),(0,a.kt)("h2",{id:"task-2"},"Task 2"),(0,a.kt)("p",null,"Let's try modifying the above Cleanup Policy to cleanup the following Policy Exception:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: kyverno.io/v2alpha1\nkind: PolicyException\nmetadata:\n  name: pe-disallow-latest-tag\n  namespace: default\n  labels:\n    canRemove: "true"\nspec:\n  exceptions:\n  - policyName: disallow-latest-tag\n    ruleNames:\n    - require-image-tag\n    - validate-image-tag\n  match:\n    any:\n    - resources:\n        kinds:\n        - Pod\n        namespaces:\n        - kyverno\n        - test\n')),(0,a.kt)("p",null,"Grant the Cleanup Controller appropriate permissions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'k edit clusterrole kyverno:cleanup-controller:core\n...\n- apiGroups:\n  - "kyverno.io"\n  resources:\n  - policyexceptions\n  verbs:\n  - list\n  - get\n  - delete\n')),(0,a.kt)("p",null,"Create the Cleanup Policy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: kyverno.io/v2alpha1\nkind: ClusterCleanupPolicy\nmetadata:\n  name: cleanup-pe\nspec:\n  match:\n    any:\n    - resources:\n        kinds:\n          - PolicyExceptions\n        selector:\n          matchLabels:\n            canRemove: "true"\n  schedule: "*/1 * * * *"\n')),(0,a.kt)("p",null,"Test by creating the Pod in the ",(0,a.kt)("inlineCode",{parentName:"p"},"kyverno")," namespace:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"k get polex -w\n")))}d.isMDXComponent=!0}}]);